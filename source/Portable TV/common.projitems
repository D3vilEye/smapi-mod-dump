<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<HasSharedItems>true</HasSharedItems>
		<SharedGUID>{F3ACA3DE-4944-411B-9DCF-544AEC2F135B}</SharedGUID>
	</PropertyGroup>
	<UsingTask TaskName="FixZipAndDeploySafely" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<ModZipPath Required="true" />
			<ModFolderName Required="true" />
			<DeployDir Required="true" />
		</ParameterGroup>
		<Task>
			<Reference Include="System.IO.Compression" />
			<Reference Include="System.IO.Compression.FileSystem" />
			<Using Namespace="System.Collections.Generic" />
			<Using Namespace="System.IO" />
			<Using Namespace="System.IO.Compression" />
			<Using Namespace="System.Linq" />
			<Code Type="Fragment" Language="cs">
			<![CDATA[
				try
				{
					var archives = Directory.GetFiles (ModZipPath);
					Array.Sort (archives);
					string archivePath = archives.Last
						((f) => f.EndsWith (".zip", System.StringComparison.Ordinal));

					Log.LogMessage (MessageImportance.High,
						$"Fixing file structure in ZIP file at {archivePath}...");
					ZipArchive zip = ZipFile.Open (archivePath, ZipArchiveMode.Update);
					List<string> oldFullNames = zip.Entries
						.Select ((e) => e.FullName).ToList ();
					foreach (string oldFullName in oldFullNames)
					{
						if (oldFullName.EndsWith (".xcf",
								System.StringComparison.Ordinal) ||
							oldFullName.EndsWith (".svg",
								System.StringComparison.Ordinal))
						{
							Log.LogMessage (MessageImportance.Low,
								$"...removing working file {oldFullName}");
							zip.GetEntry (oldFullName).Delete ();
							continue;
						}

						if (oldFullName.StartsWith ($"{ModFolderName}/[",
							System.StringComparison.Ordinal))
						{
							Log.LogMessage (MessageImportance.Low,
								$"...fixing entry {oldFullName}");
							ZipArchiveEntry oldEntry = zip.GetEntry (oldFullName);
							ZipArchiveEntry newEntry = zip.CreateEntry (oldFullName
								.Substring (ModFolderName.Length + 1));
							using (Stream oldStream = oldEntry.Open ())
							using (Stream newStream = newEntry.Open ())
							{
								oldStream.CopyTo (newStream);
							}
							oldEntry.Delete ();
						}
					}
					zip.Dispose ();

					if (DeployDir != "-")
					{
						Log.LogMessage (MessageImportance.High,
							$"Deploy safely to {DeployDir} from from ZIP file at {archivePath}...");
						if (Directory.Exists (DeployDir))
							Directory.Delete (DeployDir, true);
						ZipFile.ExtractToDirectory (archivePath, DeployDir);
					}
				}
				catch (Exception ex)
				{
					Log.LogErrorFromException (ex);
				}
			]]>
			</Code>
		</Task>
	</UsingTask>
</Project>
